Registration
============

API Views
---------

There are two views used in the registration workflow:

.. _register-view:

register
~~~~~~~~

.. autofunction:: rest_registration.api.views.register

.. _verify-registration-view:

verify-registration
~~~~~~~~~~~~~~~~~~~

.. autofunction:: rest_registration.api.views.verify_registration

Assuming that the Django REST registration views are served at
``https://backend-host/api/v1/accounts/``
then the ``register``, ``verify_registration`` views are served as:

* ``https://backend-host/api/v1/accounts/register/``
* ``https://backend-host/api/v1/accounts/verify-registration/``

accordingly.

Verification workflow
---------------------

We're assuming that the Django REST Registration views are served at
``https://backend-host/api/v1/accounts/``
and you configured :ref:`register-verification-url-setting` to be
``https://frontend-host/verify-user/``


1.  The user who wants to register itself sends AJAX POST request to
    ``https://backend-host/api/v1/accounts/register/`` endpoint.
    Usually this happens via front-end aplication, which could be hosted
    on ``https://frontend-host/``.

2.  Assuming the registration was correct, The ``register`` endpoint
    will generate an e-mail which will contain an URL which the
    newly registered user should click to activate his/her account.
    the URL would be in a form:

    ``https://frontend-host/verify-user/?user_id=<user id>&timestamp=<timestamp>&signature=<signature>``

    (You can change the way the URL is generated by overriding
    :ref:`verification-url-builder-setting`)

3.  The frontend endpoint (which is not provided by Django REST Registration)
    ``https://frontend-host/verify-user/`` would receive following GET
    parameters:

    - ``user_id``
    - ``timestamp``
    - ``signature``

    and then it should perform AJAX request to
    ``https://backend-host/api/v1/accounts/verify-registration/``
    via HTTP POST with following JSON payload:

    .. code:: javascript

        {
            "user_id": "<user id>",
            "timestamp": "<timestamp>",
            "signature": "<signature>"
        }

    and then show a message to the user depending on the response from
    backend server.

Default serializers
-------------------

.. _default-register-user-serializer:

DefaultRegisterUserSerializer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. autoclass:: rest_registration.api.serializers.DefaultRegisterUserSerializer

List of settings
----------------

These settings can be used to configure registration workflow.
You should add them as keys (with values)
to your ``settings.REST_REGISTRATION`` dict.

.. jinja:: detailed_configuration__register
   :file: detailed_configuration/settings_fields.j2
